{"version":3,"sources":["components/nav.js","components/hero.js","components/card.js","components/row.js","actions/totals.js","components/footer.js","App.js","reducers/totalsReducer.js","reducers/index.js","index.js"],"names":["NavBar","link","text","href","className","id","Hero","Card","props","start","end","type","calculate","action","totalPromoters","totalPassives","totalDetractors","clear","useState","0","1","2","3","4","5","6","7","8","9","10","promoters","passives","detractors","state","setState","useEffect","sum","selectState","selectProps","input","nums","i","unshift","range","map","key","pattern","name","value","onChange","handleChange","totalInput","sumOfAllTypes","percentage","Math","round","percentages","calcNps","nps","column","calc","renderComponent","selectLine","evt","target","Number","connect","totals","updatePromoters","total","payload","updatePassives","updateDetractors","toggleClear","bool","reset","setReset","row","header","body","countAndGroup","onClick","toggle","startOver","e","preventDefault","Footer","email","password","placeholder","maxlength","App","initialState","totalsReducer","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec528165.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction NavBar() {\r\n  const link = (text, link) => (\r\n    <li>\r\n      <a href={link}>{text}</a>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <section className=\"navigation\">\r\n      <div className=\"nav-container\">\r\n        <nav>\r\n          <div className=\"nav-mobile\">\r\n            <a id=\"nav-toggle\" href=\"#!\">\r\n              <span></span>\r\n            </a>\r\n          </div>\r\n          <ul className=\"nav-list\">\r\n            <div className=\"nav-left\">\r\n              <li>\r\n                <a href=\"#!\">\r\n                  Product <i className=\"fas fa-chevron-down\"></i>\r\n                </a>\r\n                <ul className=\"nav-dropdown\">\r\n                  {link(\"Product 1\", \"#\")}\r\n                  {link(\"Product 2\", \"#\")}\r\n                  {link(\"Product 3\", \"#\")}\r\n                </ul>\r\n              </li>\r\n              {link(\"Customers\", \"#\")}\r\n              {link(\"Enterprise\", \"#\")}\r\n              {link(\"Pricing\", \"#\")}\r\n            </div>\r\n            <div className=\"nav-right\">\r\n              <li>\r\n                <a href=\"#!\">\r\n                  Help <i className=\"fas fa-chevron-down\"></i>\r\n                </a>\r\n                <ul className=\"nav-dropdown\">\r\n                  {link(\"Help 1\", \"#\")}\r\n                  {link(\"Help 2\", \"#\")}\r\n                  {link(\"Help 3\", \"#\")}\r\n                </ul>\r\n              </li>\r\n              {link(\"Get started for free\", \"#\")}\r\n              {link(\"Sign in\", \"#\")}\r\n            </div>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nfunction Hero() {\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"section section-hero hero-container\">\r\n        <div className=\"hero\">\r\n          <div className=\"container\">\r\n            <div className=\"cols\">\r\n              <div className=\"heading-wrapper\">\r\n                  <h1 className=\"hero-heading\">\r\n                    Calculate your NPS® (Net Promoter Score)\r\n                  </h1>\r\n                  <p>\r\n                    Calculating your NPS score is as simple as tallying up your\r\n                    responses and subtracting the percentage of detractors from\r\n                    the percentage of promoters. The score is a whole number\r\n                    that ranges from -100 to 100, and indicates customer\r\n                    happiness with your brand experience.\r\n                  </p>\r\n                  <p>\r\n                    Use the calculator below to calculate your NPS from your\r\n                    survey responses.\r\n                  </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Hero;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Card(props) {\r\n  // props\r\n  let {\r\n    start,\r\n    end,\r\n    type,\r\n    calculate,\r\n    action,\r\n    totalPromoters,\r\n    totalPassives,\r\n    totalDetractors, \r\n    clear\r\n  } = props;\r\n\r\n  // local state\r\n  const [state, setState] = useState({\r\n    0: 0,\r\n    1: 0,\r\n    2: 0,\r\n    3: 0,\r\n    4: 0,\r\n    5: 0,\r\n    6: 0,\r\n    7: 0,\r\n    8: 0,\r\n    9: 0,\r\n    10: 0,\r\n    promoters: totalPromoters,\r\n    passives: totalPassives,\r\n    detractors: totalDetractors\r\n  });\r\n\r\n  // ***UPDATERS***\r\n\r\n  // updates the store depending on inputs\r\n  useEffect(() => {\r\n    if (calculate === \"inputs\") {\r\n      action(sum(type));\r\n    } else if (calculate === \"totals\") {\r\n      action(selectState(type));\r\n    }\r\n  }, [state]);\r\n\r\n  // updates the local state to reflect new changes in totals\r\n  useEffect(() => {\r\n    setState({\r\n      ...state,\r\n      [type]: selectProps(type)\r\n    });\r\n  }, [totalPromoters, totalPassives, totalDetractors]);\r\n\r\n  // clears form\r\n  useEffect(() => {\r\n    setState({\r\n      0: 0,\r\n      1: 0,\r\n      2: 0,\r\n      3: 0,\r\n      4: 0,\r\n      5: 0,\r\n      6: 0,\r\n      7: 0,\r\n      8: 0,\r\n      9: 0,\r\n      10: 0,\r\n      promoters: 0,\r\n      passives: 0,\r\n      detractors: 0\r\n    });\r\n  }, [clear]);\r\n\r\n  \r\n  // ***CONDITIONAL ELEMENTS***\r\n\r\n  // counting inputs element\r\n  let nums = range(end, start + 1);\r\n  const input = nums.map(i => (\r\n    <div key={i} className=\"total\">\r\n      <div>{i}</div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          pattern=\"[0-9]*\"\r\n          name={i}\r\n          value={state[i]}\r\n          className=\"total-input\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  // totals element\r\n  const totalInput = (\r\n    <div className=\"total\">\r\n      <div>Total</div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          pattern=\"[0-9]*\"\r\n          name={type}\r\n          value={selectState(type)}\r\n          className=\"total-input\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // percentages element\r\n  const sumOfAllTypes = totalPromoters + totalPassives + totalDetractors;\r\n  const percentage = type =>\r\n    Math.round((selectProps(type) / sumOfAllTypes) * 100);\r\n  const percentages = (\r\n    <div className=\"total\">\r\n      <div className=\"total-percent\">\r\n        {`${percentage(type) ? percentage(type) : 0}%`}\r\n      </div>\r\n      <div className=\"total-label\">of total responses</div>\r\n    </div>\r\n  );\r\n\r\n  // nps element\r\n  const calcNps = () => percentage(\"promoters\") - percentage(\"detractors\");\r\n  const nps = (\r\n    <div className=\"total\">\r\n      <div className=\"total-percent\">\r\n        {calcNps() ? calcNps() : 0}\r\n      </div>\r\n      <div className=\"total-label\">This is your NPS.</div>\r\n    </div>\r\n  );\r\n\r\n  // main card component\r\n  return (\r\n    <div className={`column column-${column(type)}`}>\r\n      <div className={`group group-${type}`}>\r\n        <div\r\n          className={`emote image-${type}`}\r\n        ></div>\r\n        <div className=\"totals\">{renderComponent(calculate)}</div>\r\n        {selectLine(type, calculate)}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // ***HELPER FUNCTIONS***\r\n\r\n  // renders the amount of input fields depending on a range\r\n  function range(start, end) {\r\n    let nums = [];\r\n    for (let i = start; i < end; i++) {\r\n      nums.unshift(i);\r\n    }\r\n    return nums;\r\n  }\r\n\r\n  // handles the changes in inputs\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setState({\r\n      ...state,\r\n      [name]: Number(value)\r\n    });\r\n  }\r\n\r\n  // places the type in the appropriate columns\r\n  function column(type) {\r\n    if (type === \"promoters\") {\r\n      return \"2\";\r\n    } else if (type === \"passives\") {\r\n      return \"3\";\r\n    } else if (type === \"detractors\") {\r\n      return \"4\";\r\n    } else if (type === \"nps\") {\r\n      return \"6\";\r\n    }\r\n  }\r\n\r\n  // sums up the amount of responses\r\n  function sum(type) {\r\n    if (type === \"promoters\") {\r\n      return state[10] + state[9];\r\n    } else if (type === \"passives\") {\r\n      return state[8] + state[7];\r\n    } else if (type === \"detractors\") {\r\n      return (\r\n        state[6] +\r\n        state[5] +\r\n        state[4] +\r\n        state[3] +\r\n        state[2] +\r\n        state[1] +\r\n        state[0]\r\n      );\r\n    }\r\n  }\r\n\r\n  // selects the local state depending on type\r\n  function selectState(type) {\r\n    if (type === \"promoters\") {\r\n      return state.promoters;\r\n    } else if (type === \"passives\") {\r\n      return state.passives;\r\n    } else if (type === \"detractors\") {\r\n      return state.detractors;\r\n    }\r\n  }\r\n\r\n  // selects the props depending on the type\r\n  function selectProps(type) {\r\n    if (type === \"promoters\") {\r\n      return totalPromoters;\r\n    } else if (type === \"passives\") {\r\n      return totalPassives;\r\n    } else if (type === \"detractors\") {\r\n      return totalDetractors;\r\n    }\r\n  }\r\n\r\n  // renders the appropriate component depending on what you want to calculate\r\n  function renderComponent(calc) {\r\n    if (calc === \"inputs\") {\r\n      return input;\r\n    } else if (calc === \"totals\") {\r\n      return totalInput;\r\n    } else if (calc === \"percentages\") {\r\n      return percentages;\r\n    } else if (calc === \"nps\") {\r\n      return nps;\r\n    }\r\n  }\r\n\r\n  // selects appropriate image for each card\r\n  function selectLine(type, calc) {\r\n    if (calc === \"inputs\") {\r\n      return (\r\n        <div\r\n          className={`connect inputs inputs-${type} inputs-image-${type}`}\r\n        ></div>\r\n      );\r\n    } else if (calc === \"totals\" && type === \"promoters\") {\r\n      return (\r\n        <div className=\"connect totals-promoters totals-image-promoters\"></div>\r\n      );\r\n    } else if (calc === \"totals\" && type === \"detractors\") {\r\n      return (\r\n        <div className=\"connect totals-detractors totals-image-detractors\"></div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  updatePromoters,\r\n  updatePassives,\r\n  updateDetractors,\r\n  toggleClear\r\n} from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"./card\";\r\n\r\nfunction Row(props) {\r\n\r\n  let [reset, setReset] = useState(false)\r\n\r\n  let {\r\n    row,\r\n    header,\r\n    body,\r\n    totalPromoters,\r\n    totalPassives,\r\n    totalDetractors,\r\n    calculate,\r\n    clear\r\n  } = props;\r\n\r\n  // clears when reset is changed\r\n  useEffect(() => {\r\n      props.toggleClear(reset)\r\n  }, [reset])\r\n\r\n\r\n  // ***CONDITIONAL ELEMENTS***\r\n\r\n  // element to count responses and sum the totals\r\n  const countAndGroup = (\r\n    <>\r\n      <Card\r\n        start={10}\r\n        end={9}\r\n        type=\"promoters\"\r\n        calculate={calculate}\r\n        action={props.updatePromoters}\r\n        totalPromoters={totalPromoters}\r\n        clear={clear}\r\n      />\r\n\r\n      <Card\r\n        start={8}\r\n        end={7}\r\n        type=\"passives\"\r\n        calculate={calculate}\r\n        action={props.updatePassives}\r\n        totalPassives={totalPassives}\r\n        clear={clear}\r\n      />\r\n\r\n      <Card\r\n        start={6}\r\n        end={0}\r\n        type=\"detractors\"\r\n        calculate={calculate}\r\n        action={props.updateDetractors}\r\n        totalDetractors={totalDetractors}\r\n        clear={clear}\r\n      />\r\n    </>\r\n  );\r\n\r\n  // element to calculate percentages\r\n  const percentages = (\r\n    <>\r\n      <Card\r\n        type=\"promoters\"\r\n        calculate={calculate}\r\n        action={props.updatePromoters}\r\n        totalPromoters={totalPromoters}\r\n        totalPassives={totalPassives}\r\n        totalDetractors={totalDetractors}\r\n      />\r\n\r\n      <div className=\"column column-3\">\r\n        <div className=\"operator operator-minus\">&minus;</div>\r\n      </div>\r\n\r\n      <Card\r\n        type=\"detractors\"\r\n        calculate={calculate}\r\n        action={props.updateDetractors}\r\n        totalPromoters={totalPromoters}\r\n        totalPassives={totalPassives}\r\n        totalDetractors={totalDetractors}\r\n      />\r\n\r\n      <div className=\"column column-5\">\r\n        <div className=\"operator operator-equal\">=</div>\r\n      </div>\r\n\r\n      <Card\r\n        type=\"nps\"\r\n        calculate=\"nps\"\r\n        totalPromoters={totalPromoters}\r\n        totalPassives={totalPassives}\r\n        totalDetractors={totalDetractors}\r\n      />\r\n    </>\r\n  );\r\n\r\n  // main row component\r\n  return (\r\n    <div className={`row row-${row}`}>\r\n      <div className=\"column column-1\">\r\n        <div className=\"instructions\">\r\n          <h3>{header}</h3>\r\n          <p>\r\n            {body}\r\n            {startOver(calculate)}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      {renderComponent(calculate)}\r\n    </div>\r\n  );\r\n\r\n  // ***HELPER FUNCTIONS***\r\n\r\n  // render component depending on what you want to calculate\r\n  function renderComponent(calc) {\r\n    if (calc === \"totals\" || calc === \"inputs\") {\r\n      return countAndGroup;\r\n    } else if (calc === \"percentages\") {\r\n      return percentages;\r\n    }\r\n  }\r\n\r\n  function toggle(e){\r\n    e.preventDefault()\r\n    setReset(!reset)\r\n  }\r\n\r\n  function startOver(calc) {\r\n    if (calc === \"percentages\") {\r\n      return (\r\n          <div className=\"clear\">\r\n          <a className=\"clear-link\" href=\"#\" onClick={toggle}>\r\n            Start over\r\n          </a>\r\n          </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// redux connection\r\nconst mapStateToProps = ({ totals }) => ({\r\n  totalPromoters: totals.totalPromoters,\r\n  totalPassives: totals.totalPassives,\r\n  totalDetractors: totals.totalDetractors,\r\n  clear: totals.clear\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  updatePromoters,\r\n  updatePassives,\r\n  updateDetractors,\r\n  toggleClear\r\n})(Row);\r\n","export const UPDATE_PROMOTERS = 'UPDATE_PROMOTERS';\r\nexport const UPDATE_PASSIVES = 'UPDATE_PASSIVES';\r\nexport const UPDATE_DETRACTORS = 'UPDATE_DETRACTORS';\r\nexport const CLEAR_FORM = 'CLEAR_FORM'\r\n\r\nexport const updatePromoters = (total) => (\r\n    {\r\n        type: UPDATE_PROMOTERS,\r\n        payload: total\r\n    }\r\n)\r\n\r\nexport const updatePassives = (total) => (\r\n    {\r\n        type: UPDATE_PASSIVES,\r\n        payload: total\r\n    }\r\n)\r\n\r\nexport const updateDetractors = (total) => (\r\n    {\r\n        type: UPDATE_DETRACTORS,\r\n        payload: total\r\n    }\r\n)\r\n\r\nexport const toggleClear = (bool) => (\r\n    {\r\n        type: CLEAR_FORM,\r\n        payload: !bool\r\n    }\r\n)","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Footer(props) {\r\n  const [state, setState] = useState({\r\n    email: \"\",\r\n    password: \"\"\r\n  });\r\n\r\n  return (\r\n    <div className=\"section section-ruled\">\r\n      <div className=\"container\">\r\n        <div className=\"cols\">\r\n          <div className=\"wrapper\">\r\n            <div className=\"heading\">\r\n              <h2>\r\n                Interested in improving your customer experience with NPS?\r\n              </h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <form className=\"form\">\r\n        <input\r\n          id=\"email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={state.email}\r\n          placeholder=\"Your email address\"\r\n          maxlength=\"255\"\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={state.password}\r\n          placeholder=\"Choose a password\"\r\n          maxlength=\"255\"\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"button\">\r\n          <button type=\"submit\" id=\"get-started\">\r\n            Get Started\r\n          </button>\r\n          or\r\n          <button type=\"submit\" id=\"google\">\r\n            Sign up with Google\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"sharing\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // handles the changes in inputs\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setState({\r\n      ...state,\r\n      [name]: value\r\n    });\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport NavBar from './components/nav'\r\nimport Hero from \"./components/hero\";\r\nimport Row from \"./components/row\";\r\nimport Footer from \"./components/footer\"\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <Hero />\r\n      <div className=\"section section-bg section-ruled section-labeled label-container-outer\">\r\n        <div className=\"label-container-inner\">\r\n          <div className=\"label\">NPS Calculator</div>\r\n        </div>\r\n        <div className=\"container container-nps\">\r\n          <div className=\"cols\">\r\n            <div className=\"wrapper\">\r\n              <div className=\"nps\">\r\n\r\n                <Row\r\n                  row={1}\r\n                  calculate=\"inputs\"\r\n                  header=\"Count the responses\"\r\n                  body=\"Add up the number of responses provided for each score.\"\r\n                />\r\n                <Row\r\n                  row={2}\r\n                  calculate=\"totals\"\r\n                  header=\"Group the responses\"\r\n                  body=\"Add up the total number of responses provided for each group.\"\r\n                />\r\n                <Row\r\n                  row={3}\r\n                  calculate=\"percentages\"\r\n                  header=\"Calculate your NPS\"\r\n                  body=\"Subtract the percentage of Detractors from the percentage of Promoters.\"\r\n                />\r\n                \r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n    UPDATE_PROMOTERS,\r\n    UPDATE_PASSIVES,\r\n    UPDATE_DETRACTORS,\r\n    CLEAR_FORM \r\n} from '../actions'\r\n\r\nconst initialState = {\r\n    totalPromoters: 0,\r\n    totalPassives: 0,\r\n    totalDetractors: 0,\r\n    clear: false\r\n}\r\n\r\nconst totalsReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_PROMOTERS:\r\n            return {\r\n                ...state,\r\n                totalPromoters: action.payload\r\n            };\r\n\r\n        case UPDATE_PASSIVES:\r\n            return {\r\n                ...state,\r\n                totalPassives: action.payload\r\n            };\r\n        \r\n        case UPDATE_DETRACTORS:\r\n            return {\r\n                ...state,\r\n                totalDetractors: action.payload\r\n            }\r\n        case CLEAR_FORM:\r\n            return {\r\n                ...state,\r\n                clear: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default totalsReducer;","import { combineReducers } from 'redux';\r\nimport totalsReducer from './totalsReducer'\r\n\r\nexport default combineReducers({\r\n    totals: totalsReducer\r\n});","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App\";\r\n\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}