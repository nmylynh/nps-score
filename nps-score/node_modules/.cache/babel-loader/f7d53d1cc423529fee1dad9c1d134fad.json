{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\games\\\\Documents\\\\GitHub\\\\nps-score\\\\nps-score\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\games\\\\Documents\\\\GitHub\\\\nps-score\\\\nps-score\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\games\\\\Documents\\\\GitHub\\\\nps-score\\\\nps-score\\\\src\\\\components\\\\card.js\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction Card(props) {\n  // props\n  let start = props.start,\n      end = props.end,\n      type = props.type,\n      calculate = props.calculate,\n      action = props.action,\n      totalPromoters = props.totalPromoters,\n      totalPassives = props.totalPassives,\n      totalDetractors = props.totalDetractors,\n      reset = props.reset; // local state\n\n  const _useState = useState({\n    0: 0,\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n    7: 0,\n    8: 0,\n    9: 0,\n    10: 0,\n    promoters: totalPromoters,\n    passives: totalPassives,\n    detractors: totalDetractors\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1]; // ***UPDATERS***\n  // updates the store depending on inputs\n\n\n  useEffect(() => {\n    if (calculate === \"inputs\") {\n      action(sum(type));\n    } else if (calculate === \"totals\") {\n      action(selectState(type));\n    }\n  }, [state]); // updates the local state to reflect new changes in totals\n\n  useEffect(() => {\n    setState(_objectSpread({}, state, {\n      [type]: selectProps(type)\n    }));\n  }, [totalPromoters, totalPassives, totalDetractors]); // ***CONDITIONAL ELEMENTS***\n  // counting inputs element\n\n  let nums = range(end, start + 1);\n  const input = nums.map(i => React.createElement(\"div\", {\n    key: i,\n    className: \"total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, i), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    name: i,\n    value: state[i],\n    className: \"total-input\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })))); // totals element\n\n  const totalInput = React.createElement(\"div\", {\n    className: \"total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Total\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    name: type,\n    value: selectState(type),\n    className: \"total-input\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))); // percentages element\n\n  const sumOfAllTypes = totalPromoters + totalPassives + totalDetractors;\n\n  const percentage = type => Math.round(selectProps(type) / sumOfAllTypes * 100);\n\n  const percentages = React.createElement(\"div\", {\n    className: \"total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"total-percent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, `${percentage(type) ? percentage(type) : 0}%`), React.createElement(\"div\", {\n    className: \"total-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"of total responses\")); // nps element\n\n  const calcNps = () => percentage(\"promoters\") - percentage(\"detractors\");\n\n  const nps = React.createElement(\"div\", {\n    className: \"total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"total-percent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, calcNps() ? calcNps() : 0), React.createElement(\"div\", {\n    className: \"total-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"This is your NPS.\")); // main card component\n\n  return React.createElement(\"div\", {\n    className: `column column-${column(type)}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: `group group-${type}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: `emote image-${type}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"totals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, renderComponent(calculate)), selectLine(type, calculate))); // ***HELPER FUNCTIONS***\n  // renders the amount of input fields depending on a range\n\n  function range(start, end) {\n    let nums = [];\n\n    for (let i = start; i < end; i++) {\n      nums.unshift(i);\n    }\n\n    return nums;\n  } // handles the changes in inputs\n\n\n  function handleChange(evt) {\n    const _evt$target = evt.target,\n          name = _evt$target.name,\n          value = _evt$target.value;\n    setState(_objectSpread({}, state, {\n      [name]: Number(value)\n    }));\n  } // places the type in the appropriate columns\n\n\n  function column(type) {\n    if (type === \"promoters\") {\n      return \"2\";\n    } else if (type === \"passives\") {\n      return \"3\";\n    } else if (type === \"detractors\") {\n      return \"4\";\n    } else if (type === \"nps\") {\n      return \"6\";\n    }\n  } // sums up the amount of responses\n\n\n  function sum(type) {\n    if (type === \"promoters\") {\n      return state[10] + state[9];\n    } else if (type === \"passives\") {\n      return state[8] + state[7];\n    } else if (type === \"detractors\") {\n      return state[6] + state[5] + state[4] + state[3] + state[2] + state[1] + state[0];\n    }\n  } // selects the local state depending on type\n\n\n  function selectState(type) {\n    if (type === \"promoters\") {\n      return state.promoters;\n    } else if (type === \"passives\") {\n      return state.passives;\n    } else if (type === \"detractors\") {\n      return state.detractors;\n    }\n  } // selects the props depending on the type\n\n\n  function selectProps(type) {\n    if (type === \"promoters\") {\n      return totalPromoters;\n    } else if (type === \"passives\") {\n      return totalPassives;\n    } else if (type === \"detractors\") {\n      return totalDetractors;\n    }\n  } // renders the appropriate component depending on what you want to calculate\n\n\n  function renderComponent(calc) {\n    if (calc === \"inputs\") {\n      return input;\n    } else if (calc === \"totals\") {\n      return totalInput;\n    } else if (calc === \"percentages\") {\n      return percentages;\n    } else if (calc === \"nps\") {\n      return nps;\n    }\n  } // selects appropriate image for each card\n\n\n  function selectLine(type, calc) {\n    if (calc === \"inputs\") {\n      return React.createElement(\"div\", {\n        className: `connect inputs inputs-${type} inputs-image-${type}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      });\n    } else if (calc === \"totals\" && type === \"promoters\") {\n      return React.createElement(\"div\", {\n        className: \"connect totals-promoters totals-image-promoters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      });\n    } else if (calc === \"totals\" && type === \"detractors\") {\n      return React.createElement(\"div\", {\n        className: \"connect totals-detractors totals-image-detractors\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      });\n    }\n  }\n}\n\nexport default Card;","map":{"version":3,"sources":["C:/Users/games/Documents/GitHub/nps-score/nps-score/src/components/card.js"],"names":["React","useState","useEffect","Card","props","start","end","type","calculate","action","totalPromoters","totalPassives","totalDetractors","reset","promoters","passives","detractors","state","setState","sum","selectState","selectProps","nums","range","input","map","i","handleChange","totalInput","sumOfAllTypes","percentage","Math","round","percentages","calcNps","nps","column","renderComponent","selectLine","unshift","evt","target","name","value","Number","calc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Card(props) {\r\n  // props\r\n  let {\r\n    start,\r\n    end,\r\n    type,\r\n    calculate,\r\n    action,\r\n    totalPromoters,\r\n    totalPassives,\r\n    totalDetractors, \r\n    reset\r\n  } = props;\r\n\r\n  // local state\r\n  const [state, setState] = useState({\r\n    0: 0,\r\n    1: 0,\r\n    2: 0,\r\n    3: 0,\r\n    4: 0,\r\n    5: 0,\r\n    6: 0,\r\n    7: 0,\r\n    8: 0,\r\n    9: 0,\r\n    10: 0,\r\n    promoters: totalPromoters,\r\n    passives: totalPassives,\r\n    detractors: totalDetractors\r\n  });\r\n\r\n  // ***UPDATERS***\r\n\r\n  // updates the store depending on inputs\r\n  useEffect(() => {\r\n    if (calculate === \"inputs\") {\r\n      action(sum(type));\r\n    } else if (calculate === \"totals\") {\r\n      action(selectState(type));\r\n    }\r\n  }, [state]);\r\n\r\n  // updates the local state to reflect new changes in totals\r\n  useEffect(() => {\r\n    setState({\r\n      ...state,\r\n      [type]: selectProps(type)\r\n    });\r\n  }, [totalPromoters, totalPassives, totalDetractors]);\r\n\r\n\r\n  // ***CONDITIONAL ELEMENTS***\r\n\r\n  // counting inputs element\r\n  let nums = range(end, start + 1);\r\n  const input = nums.map(i => (\r\n    <div key={i} className=\"total\">\r\n      <div>{i}</div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          pattern=\"[0-9]*\"\r\n          name={i}\r\n          value={state[i]}\r\n          className=\"total-input\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  // totals element\r\n  const totalInput = (\r\n    <div className=\"total\">\r\n      <div>Total</div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          pattern=\"[0-9]*\"\r\n          name={type}\r\n          value={selectState(type)}\r\n          className=\"total-input\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // percentages element\r\n  const sumOfAllTypes = totalPromoters + totalPassives + totalDetractors;\r\n  const percentage = type =>\r\n    Math.round((selectProps(type) / sumOfAllTypes) * 100);\r\n  const percentages = (\r\n    <div className=\"total\">\r\n      <div className=\"total-percent\">\r\n        {`${percentage(type) ? percentage(type) : 0}%`}\r\n      </div>\r\n      <div className=\"total-label\">of total responses</div>\r\n    </div>\r\n  );\r\n\r\n  // nps element\r\n  const calcNps = () => percentage(\"promoters\") - percentage(\"detractors\");\r\n  const nps = (\r\n    <div className=\"total\">\r\n      <div className=\"total-percent\">\r\n        {calcNps() ? calcNps() : 0}\r\n      </div>\r\n      <div className=\"total-label\">This is your NPS.</div>\r\n    </div>\r\n  );\r\n\r\n  // main card component\r\n  return (\r\n    <div className={`column column-${column(type)}`}>\r\n      <div className={`group group-${type}`}>\r\n        <div\r\n          className={`emote image-${type}`}\r\n        ></div>\r\n        <div className=\"totals\">{renderComponent(calculate)}</div>\r\n        {selectLine(type, calculate)}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // ***HELPER FUNCTIONS***\r\n\r\n  // renders the amount of input fields depending on a range\r\n  function range(start, end) {\r\n    let nums = [];\r\n    for (let i = start; i < end; i++) {\r\n      nums.unshift(i);\r\n    }\r\n    return nums;\r\n  }\r\n\r\n  // handles the changes in inputs\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setState({\r\n      ...state,\r\n      [name]: Number(value)\r\n    });\r\n  }\r\n\r\n  // places the type in the appropriate columns\r\n  function column(type) {\r\n    if (type === \"promoters\") {\r\n      return \"2\";\r\n    } else if (type === \"passives\") {\r\n      return \"3\";\r\n    } else if (type === \"detractors\") {\r\n      return \"4\";\r\n    } else if (type === \"nps\") {\r\n      return \"6\";\r\n    }\r\n  }\r\n\r\n  // sums up the amount of responses\r\n  function sum(type) {\r\n    if (type === \"promoters\") {\r\n      return state[10] + state[9];\r\n    } else if (type === \"passives\") {\r\n      return state[8] + state[7];\r\n    } else if (type === \"detractors\") {\r\n      return (\r\n        state[6] +\r\n        state[5] +\r\n        state[4] +\r\n        state[3] +\r\n        state[2] +\r\n        state[1] +\r\n        state[0]\r\n      );\r\n    }\r\n  }\r\n\r\n  // selects the local state depending on type\r\n  function selectState(type) {\r\n    if (type === \"promoters\") {\r\n      return state.promoters;\r\n    } else if (type === \"passives\") {\r\n      return state.passives;\r\n    } else if (type === \"detractors\") {\r\n      return state.detractors;\r\n    }\r\n  }\r\n\r\n  // selects the props depending on the type\r\n  function selectProps(type) {\r\n    if (type === \"promoters\") {\r\n      return totalPromoters;\r\n    } else if (type === \"passives\") {\r\n      return totalPassives;\r\n    } else if (type === \"detractors\") {\r\n      return totalDetractors;\r\n    }\r\n  }\r\n\r\n  // renders the appropriate component depending on what you want to calculate\r\n  function renderComponent(calc) {\r\n    if (calc === \"inputs\") {\r\n      return input;\r\n    } else if (calc === \"totals\") {\r\n      return totalInput;\r\n    } else if (calc === \"percentages\") {\r\n      return percentages;\r\n    } else if (calc === \"nps\") {\r\n      return nps;\r\n    }\r\n  }\r\n\r\n  // selects appropriate image for each card\r\n  function selectLine(type, calc) {\r\n    if (calc === \"inputs\") {\r\n      return (\r\n        <div\r\n          className={`connect inputs inputs-${type} inputs-image-${type}`}\r\n        ></div>\r\n      );\r\n    } else if (calc === \"totals\" && type === \"promoters\") {\r\n      return (\r\n        <div className=\"connect totals-promoters totals-image-promoters\"></div>\r\n      );\r\n    } else if (calc === \"totals\" && type === \"detractors\") {\r\n      return (\r\n        <div className=\"connect totals-detractors totals-image-detractors\"></div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Card;\r\n"]},"metadata":{},"sourceType":"module"}