{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\games\\\\Documents\\\\GitHub\\\\nps-score\\\\nps-score\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\games\\\\Documents\\\\GitHub\\\\nps-score\\\\nps-score\\\\src\\\\components\\\\row.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { updatePromoters, updatePassives, updateDetractors, toggleClear } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport Card from \"./card\";\n\nfunction Row(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        reset = _useState2[0],\n        setReset = _useState2[1];\n\n  let row = props.row,\n      header = props.header,\n      body = props.body,\n      totalPromoters = props.totalPromoters,\n      totalPassives = props.totalPassives,\n      totalDetractors = props.totalDetractors,\n      calculate = props.calculate,\n      clear = props.clear;\n  useEffect(() => {\n    if (reset === true) {\n      props.toggleClear(clear);\n      props.updatePromoters(0);\n      props.updatePassives(0);\n      props.updateDetractors(0);\n      setReset(false);\n    }\n  }, [reset]); // ***CONDITIONAL ELEMENTS***\n  // element to count responses and sum the totals\n\n  const countAndGroup = React.createElement(React.Fragment, null, React.createElement(Card, {\n    start: 10,\n    end: 9,\n    type: \"promoters\",\n    calculate: calculate,\n    action: props.updatePromoters,\n    totalPromoters: totalPromoters,\n    clear: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Card, {\n    start: 8,\n    end: 7,\n    type: \"passives\",\n    calculate: calculate,\n    action: props.updatePassives,\n    totalPassives: totalPassives,\n    clear: clear,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(Card, {\n    start: 6,\n    end: 0,\n    type: \"detractors\",\n    calculate: calculate,\n    action: props.updateDetractors,\n    totalDetractors: totalDetractors,\n    clear: clear,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })); // element to calculate percentages\n\n  const percentages = React.createElement(React.Fragment, null, React.createElement(Card, {\n    type: \"promoters\",\n    calculate: calculate,\n    action: props.updatePromoters,\n    totalPromoters: totalPromoters,\n    totalPassives: totalPassives,\n    totalDetractors: totalDetractors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"column column-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"operator operator-minus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"\\u2212\")), React.createElement(Card, {\n    type: \"detractors\",\n    calculate: calculate,\n    action: props.updateDetractors,\n    totalPromoters: totalPromoters,\n    totalPassives: totalPassives,\n    totalDetractors: totalDetractors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"column column-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"operator operator-equal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"=\")), React.createElement(Card, {\n    type: \"nps\",\n    calculate: \"nps\",\n    totalPromoters: totalPromoters,\n    totalPassives: totalPassives,\n    totalDetractors: totalDetractors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })); // main row component\n\n  return React.createElement(\"div\", {\n    className: `row row-${row}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"column column-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, header), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, body, startOver(calculate)))), renderComponent(calculate)); // ***HELPER FUNCTIONS***\n  // render component depending on what you want to calculate\n\n  function renderComponent(calc) {\n    if (calc === \"totals\" || calc === \"inputs\") {\n      return countAndGroup;\n    } else if (calc === \"percentages\") {\n      return percentages;\n    }\n  }\n\n  function toggle(e) {\n    setReset(true);\n  }\n\n  function startOver(calc) {\n    if (calc === \"percentages\") {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"clear-link\",\n        href: \"#\",\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Start over\"));\n    }\n  }\n} // redux connection\n\n\nconst mapStateToProps = ({\n  totals\n}) => ({\n  totalPromoters: totals.totalPromoters,\n  totalPassives: totals.totalPassives,\n  totalDetractors: totals.totalDetractors,\n  clear: totals.clear\n});\n\nexport default connect(mapStateToProps, {\n  updatePromoters,\n  updatePassives,\n  updateDetractors,\n  toggleClear\n})(Row);","map":{"version":3,"sources":["C:/Users/games/Documents/GitHub/nps-score/nps-score/src/components/row.js"],"names":["React","useEffect","useState","updatePromoters","updatePassives","updateDetractors","toggleClear","connect","Card","Row","props","reset","setReset","row","header","body","totalPromoters","totalPassives","totalDetractors","calculate","clear","countAndGroup","percentages","startOver","renderComponent","calc","toggle","e","mapStateToProps","totals"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  updatePromoters,\r\n  updatePassives,\r\n  updateDetractors,\r\n  toggleClear\r\n} from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"./card\";\r\n\r\nfunction Row(props) {\r\n\r\n  const [reset, setReset] = useState(false)\r\n\r\n  let {\r\n    row,\r\n    header,\r\n    body,\r\n    totalPromoters,\r\n    totalPassives,\r\n    totalDetractors,\r\n    calculate,\r\n    clear\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    if(reset === true){\r\n      props.toggleClear(clear)\r\n      props.updatePromoters(0)\r\n      props.updatePassives(0)\r\n      props.updateDetractors(0)\r\n      setReset(false)\r\n    }\r\n  }, [reset])\r\n\r\n\r\n  // ***CONDITIONAL ELEMENTS***\r\n\r\n  // element to count responses and sum the totals\r\n  const countAndGroup = (\r\n    <>\r\n      <Card\r\n        start={10}\r\n        end={9}\r\n        type=\"promoters\"\r\n        calculate={calculate}\r\n        action={props.updatePromoters}\r\n        totalPromoters={totalPromoters}\r\n        clear={reset}\r\n      />\r\n\r\n      <Card\r\n        start={8}\r\n        end={7}\r\n        type=\"passives\"\r\n        calculate={calculate}\r\n        action={props.updatePassives}\r\n        totalPassives={totalPassives}\r\n        clear={clear}\r\n      />\r\n\r\n      <Card\r\n        start={6}\r\n        end={0}\r\n        type=\"detractors\"\r\n        calculate={calculate}\r\n        action={props.updateDetractors}\r\n        totalDetractors={totalDetractors}\r\n        clear={clear}\r\n      />\r\n    </>\r\n  );\r\n\r\n  // element to calculate percentages\r\n  const percentages = (\r\n    <>\r\n      <Card\r\n        type=\"promoters\"\r\n        calculate={calculate}\r\n        action={props.updatePromoters}\r\n        totalPromoters={totalPromoters}\r\n        totalPassives={totalPassives}\r\n        totalDetractors={totalDetractors}\r\n      />\r\n\r\n      <div className=\"column column-3\">\r\n        <div className=\"operator operator-minus\">&minus;</div>\r\n      </div>\r\n\r\n      <Card\r\n        type=\"detractors\"\r\n        calculate={calculate}\r\n        action={props.updateDetractors}\r\n        totalPromoters={totalPromoters}\r\n        totalPassives={totalPassives}\r\n        totalDetractors={totalDetractors}\r\n      />\r\n\r\n      <div className=\"column column-5\">\r\n        <div className=\"operator operator-equal\">=</div>\r\n      </div>\r\n\r\n      <Card\r\n        type=\"nps\"\r\n        calculate=\"nps\"\r\n        totalPromoters={totalPromoters}\r\n        totalPassives={totalPassives}\r\n        totalDetractors={totalDetractors}\r\n      />\r\n    </>\r\n  );\r\n\r\n  // main row component\r\n  return (\r\n    <div className={`row row-${row}`}>\r\n      <div className=\"column column-1\">\r\n        <div className=\"instructions\">\r\n          <h3>{header}</h3>\r\n          <p>\r\n            {body}\r\n            {startOver(calculate)}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      {renderComponent(calculate)}\r\n    </div>\r\n  );\r\n\r\n  // ***HELPER FUNCTIONS***\r\n\r\n  // render component depending on what you want to calculate\r\n  function renderComponent(calc) {\r\n    if (calc === \"totals\" || calc === \"inputs\") {\r\n      return countAndGroup;\r\n    } else if (calc === \"percentages\") {\r\n      return percentages;\r\n    }\r\n  }\r\n\r\n  function toggle(e){\r\n    setReset(true)\r\n  }\r\n\r\n  function startOver(calc) {\r\n    if (calc === \"percentages\") {\r\n      return (\r\n          <div>\r\n          <a className=\"clear-link\" href=\"#\" onClick={toggle}>\r\n            Start over\r\n          </a>\r\n          </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// redux connection\r\nconst mapStateToProps = ({ totals }) => ({\r\n  totalPromoters: totals.totalPromoters,\r\n  totalPassives: totals.totalPassives,\r\n  totalDetractors: totals.totalDetractors,\r\n  clear: totals.clear\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  updatePromoters,\r\n  updatePassives,\r\n  updateDetractors,\r\n  toggleClear\r\n})(Row);\r\n"]},"metadata":{},"sourceType":"module"}